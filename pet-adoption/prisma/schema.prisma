generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADOPTER
  DONOR
  FOSTER
  SHELTER
  VOLUNTEER
  VETERINARIAN
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  userType  UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User profile relations
  adopterProfile      AdopterProfile?
  donorProfile        DonorProfile?
  fosterProfile       FosterProfile?
  shelterStaffProfile ShelterStaffProfile?
  volunteerProfile    VolunteerProfile?
  veterinarianProfile VeterinarianProfile?

  // Relations
  petListings          Pet[] // For donors listing pets
  adoptionApplications AdoptionApplication[]
  favoritePetIds       Int[]                 @default([])
}

model Pet {
  id             Int      @id
  name           String
  age            String
  gender         String
  species        String
  primaryBreed   String
  secondaryBreed String?
  mixed          Boolean  @default(false)
  url            String?
  photoUrl       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  description    String?

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  adoptionApplications AdoptionApplication[]
}

model VeterinarianProfile {
  id             Int     @id @default(autoincrement())
  licenseNumber  String
  clinicName     String
  contactNumber  String
  specialization String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  shelterStaffId Int?
  shelterStaff   ShelterStaffProfile? @relation(fields: [shelterStaffId], references: [id], onDelete: SetNull)
}

model AdoptionApplication {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  petId Int
  pet   Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  status    ApplicationStatus @default(PENDING)
  appliedAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  notes     String?
}

model AdopterProfile {
  id       Int    @id @default(autoincrement())
  location String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  shelterStaffId Int?
  shelterStaff   ShelterStaffProfile? @relation(fields: [shelterStaffId], references: [id], onDelete: SetNull)
}

model DonorProfile {
  id      Int    @id @default(autoincrement())
  contact String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FosterProfile {
  id      Int    @id @default(autoincrement())
  address String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  shelterStaffId Int?
  shelterStaff   ShelterStaffProfile? @relation(fields: [shelterStaffId], references: [id], onDelete: SetNull)
}

model ShelterStaffProfile {
  id          Int     @id @default(autoincrement())
  shelterName String
  isVerified  Boolean @default(false)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  fosterProfiles FosterProfile[]
  adopters       AdopterProfile[]
  volunteers     VolunteerProfile[]
  veterinarians  VeterinarianProfile[]
}

model VolunteerProfile {
  id        Int    @id @default(autoincrement())
  interests String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  shelterStaffId Int?
  shelterStaff   ShelterStaffProfile? @relation(fields: [shelterStaffId], references: [id], onDelete: SetNull)
}
