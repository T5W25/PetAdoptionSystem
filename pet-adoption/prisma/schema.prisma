// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADOPTER
  DONOR
  FOSTER
  SHELTER
  VOLUNTEER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  userType  UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User profile relations based on user type
  adopterProfile      AdopterProfile?
  donorProfile        DonorProfile?
  fosterProfile       FosterProfile?
  shelterStaffProfile ShelterStaffProfile?
  volunteerProfile    VolunteerProfile?

  // Pet relations
  petListings Pet[] // For donors listing pets

  favoritePetIds Int[] @default([])
}

model AdopterProfile {
  id       Int    @id @default(autoincrement())
  location String

  // References to User
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // References to ShelterStaffProfile
  shelterStaffId Int?
  shelterStaff   ShelterStaffProfile? @relation(fields: [shelterStaffId], references: [id], onDelete: SetNull)
}

model DonorProfile {
  id      Int    @id @default(autoincrement())
  contact String

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FosterProfile {
  id      Int    @id @default(autoincrement())
  address String

  // References to User
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Reference to ShelterStaffProfile
  shelterStaffId Int?
  shelterStaff   ShelterStaffProfile? @relation(fields: [shelterStaffId], references: [id], onDelete: SetNull)
}

model ShelterStaffProfile {
  id          Int     @id @default(autoincrement())
  shelterName String
  isVerified  Boolean @default(false)

  // References to User
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // One-to-Many with FosterProfile
  fosterProfiles FosterProfile[]

  // One-to-Many with AdopterProfile
  adopters AdopterProfile[]
}

model VolunteerProfile {
  id        Int    @id @default(autoincrement())
  interests String

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id             Int      @id
  name           String
  age            String
  gender         String
  species        String
  primaryBreed   String
  secondaryBreed String?
  mixed          Boolean  @default(false)
  url            String
  photoUrl       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // References
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
