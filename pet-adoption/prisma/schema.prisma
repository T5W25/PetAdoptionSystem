// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADOPTER
  DONOR
  FOSTER
  SHELTER
  VOLUNTEER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  userType  UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User profile relations based on user type
  adopterProfile      AdopterProfile?
  donorProfile        DonorProfile?
  fosterProfile       FosterProfile?
  shelterStaffProfile ShelterStaffProfile?
  volunteerProfile    VolunteerProfile?

  // Pet relations
  petListings Pet[] // For donors listing pets
}

model AdopterProfile {
  id       Int    @id @default(autoincrement())
  location String

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DonorProfile {
  id      Int    @id @default(autoincrement())
  contact String

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FosterProfile {
  id      Int    @id @default(autoincrement())
  address String

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShelterStaffProfile {
  id          Int     @id @default(autoincrement())
  shelterName String
  isVerified  Boolean @default(false)

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VolunteerProfile {
  id        Int    @id @default(autoincrement())
  interests String

  // References
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id           Int      @id @default(autoincrement())
  name         String
  age          String
  gender       String
  species      String
  primaryBreed String
  url          String
  photoUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // References
  userId Int // Owner or lister of the pet
  user   User @relation(fields: [userId], references: [id])
}
